# Multi-stage build for AI Customer Service Agent
FROM python:3.12-trixie AS builder

# Environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    libssl-dev \
    libffi-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Isolated virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Dependency installation (prefer prebuilt wheels)
COPY requirements.txt /tmp/requirements.txt
RUN pip install --upgrade pip setuptools wheel && \
    pip install --prefer-binary -r /tmp/requirements.txt

# ------------------------------------------------------------------------------
FROM python:3.12-trixie

# Environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH"

# Non-root user
RUN groupadd -r aiagent && useradd -r -g aiagent aiagent

# Runtime dependencies (Debian trixie)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    libssl3 \
    libffi8 \
    curl \
    netcat-traditional \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Bring in the virtual environment
COPY --from=builder /opt/venv /opt/venv

# Workdir and import path
WORKDIR /app
ENV PYTHONPATH=/app/src

# Copy application code (omit tests/ in prod unless required)
COPY --chown=aiagent:aiagent src/ ./src/
# COPY --chown=aiagent:aiagent tests/ ./tests/

COPY --chown=aiagent:aiagent database_schema.sql ./
COPY --chown=aiagent:aiagent pyproject.toml ./
# Optional for prod:
# COPY --chown=aiagent:aiagent README.md ./

# Ensure package initializers exist without truncating existing content; sh-compatible
RUN set -eux; \
    mkdir -p src src/api /app/logs /app/data /app/config; \
    [ -f src/__init__.py ] || : > src/__init__.py; \
    [ -f src/api/__init__.py ] || : > src/api/__init__.py; \
    chown -R aiagent:aiagent /app

# Drop privileges
USER aiagent

# Healthcheck (no Python import dependency)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -fsS http://localhost:8000/health || exit 1

# Expose API port
EXPOSE 8000

# Start the app
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]

